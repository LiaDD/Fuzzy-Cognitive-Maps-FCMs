steps_t <- (as.data.frame (do.call("rbind",mylist)))   # tranform the produced stabilized vectors into a data frame
step_1 <- as.numeric(activation_vec)
# Insert the activation vector in the first row of the dataframe that contains the stabilized vectors of all time steps
A <- (rbind(step_1, steps_t))
# check if the steady state has been reached of the last two iterations
e <- as.double(A[iterations,] - A[(iterations-1),])
# Set the residual value (epsillon "e") equal to 0.001
Res_e <- (length(e[e <= 0.001]))
if ( Res_e < m)  {
cat("\n WARNING: More iterations are required to reach the convergence.\n \n")
}
cat("\n")
outlist <- list('values'= A)     # the concepts values in each state
return (outlist)
}
tanhkosko(activation_vec, weighted_mat, 30)
mylist <- list()
for(i in 1:(iterations-1)) {
if(i == 1) {
initial_vec <- colSums(t(activation_vec) * weighted_mat)
sigmoid <- tanh(initial_vec)   # Sigmoid transformation function
}
else {
# calculates the new vector (for the second until the last iteration or time step)
new_vec <- colSums(t(initial_vec) * weighted_mat)
sigmoid <- tanh(new_vec)
}
mylist[[i]] <- sigmoid  # insert each produced stabilized vector in the list
initial_vec <- sigmoid
}
}
cat("\n")
steps_t <- (as.data.frame (do.call("rbind",mylist)))   # tranform the produced stabilized vectors into a data frame
step_1 <- as.numeric(activation_vec)
# Insert the activation vector in the first row of the dataframe that contains the stabilized vectors of all time steps
A <- (rbind(step_1, steps_t))
iterators=20
mylist <- list()
for(i in 1:(iterations-1)) {
if(i == 1) {
initial_vec <- colSums(t(activation_vec) * weighted_mat)
sigmoid <- tanh(initial_vec)   # Sigmoid transformation function
}
else {
# calculates the new vector (for the second until the last iteration or time step)
new_vec <- colSums(t(initial_vec) * weighted_mat)
sigmoid <- tanh(new_vec)
}
mylist[[i]] <- sigmoid  # insert each produced stabilized vector in the list
initial_vec <- sigmoid
}
cat("\n")
steps_t <- (as.data.frame (do.call("rbind",mylist)))   # tranform the produced stabilized vectors into a data frame
step_1 <- as.numeric(activation_vec)
# Insert the activation vector in the first row of the dataframe that contains the stabilized vectors of all time steps
A <- (rbind(step_1, steps_t))
tanhkosko <- function (activation_vec, weighted_mat, iterations) {
mylist <- list()
for(i in 1:(iterations-1)) {
if(i == 1) {
initial_vec <- colSums(t(activation_vec) * weighted_mat)
sigmoid <- tanh(initial_vec)   # Sigmoid transformation function
}
else {
# calculates the new vector (for the second until the last iteration or time step)
new_vec <- colSums(t(initial_vec) * weighted_mat)
sigmoid <- tanh(new_vec)
}
mylist[[i]] <- sigmoid  # insert each produced stabilized vector in the list
initial_vec <- sigmoid
}
}
cat("\n")
steps_t <- (as.data.frame (do.call("rbind",mylist)))   # tranform the produced stabilized vectors into a data frame
step_1 <- as.numeric(activation_vec)
# Insert the activation vector in the first row of the dataframe that contains the stabilized vectors of all time steps
A <- (rbind(step_1, steps_t))
}
tanhkosko <- function (activation_vec, weighted_mat, iterations) {
# Input values
m <- ncol(weighted_mat) # number of columns of the weighted matrix
# calculates the initial vector between the activation vector and the weighted matrix (for the first iteration or time step)
# initial_vec <- colSums(t(activation_vec) * weighted_mat)
# -------------------------------------- Kosko's inference ---------------------------------------------
mylist <- list()
for(i in 1:(iterations-1)) {
if(i == 1) {
initial_vec <- colSums(t(activation_vec) * weighted_mat)
sigmoid <- tanh(initial_vec)   # Sigmoid transformation function
}
else {
# calculates the new vector (for the second until the last iteration or time step)
new_vec <- colSums(t(initial_vec) * weighted_mat)
sigmoid <- tanh(new_vec)
}
mylist[[i]] <- sigmoid  # insert each produced stabilized vector in the list
initial_vec <- sigmoid
}
cat("\n")
steps_t <- (as.data.frame (do.call("rbind",mylist)))   # tranform the produced stabilized vectors into a data frame
step_1 <- as.numeric(activation_vec)
# Insert the activation vector in the first row of the dataframe that contains the stabilized vectors of all time steps
A <- (rbind(step_1, steps_t))
outlist <- list('values'= A)     # the concepts values in each state
return (outlist)
}
tanhkosko(activation_vec, weighted_mat, 30)
library(fcm)
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
## Select the arguments for the inference (i.e. iterations 30, rescaled inference rule and sigmoid threshold function)
output <- fcm.infer(act.vec, w.mat, 30, "k", "t")
View(output$values)          # View the concept values for each iteration
## Visualize the concepts' values for each state
library (reshape)
library (ggplot2)
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")              #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
View(w.mat)
tanhkosko(activation_vec, weighted_mat, 30)
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
## Select the arguments for the inference (i.e. iterations 30, rescaled inference rule and sigmoid threshold function)
output <- fcm.infer(act.vec, w.mat, 30, "k", "t")
View(output$values)          # View the concept values for each iteration
## Visualize the concepts' values for each state
library (reshape)
library (ggplot2)
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")              #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
browseVignettes()
browseVignettes()
browseVignettes()
library(fcm)
?`fcm
?`fcm-package`
?fcm
library(fcm)
library(fcm)
library(fcm)
browseVignettes()
?fcm.infer
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
## Select the arguments for the inference (i.e. iterations 30, rescaled inference rule and sigmoid threshold function)
output <- fcm.infer(act.vec, w.mat, 30, "r", "s")
View(output$values)          # View the concept values for each iteration
## Visualize the concepts' values for each state
library (reshape)
library (ggplot2)
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")              #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
library(qgraph)
Q<-qgraph(w.mat)
C1 = c(0.0, 0.5, 0.5, 0.0, 0.6, 0.0, 0.0)
C2 = c(0.0, 0.0, 0.7, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.0, 0.7, 0.0, 0.0, 0.0, 0.0)
C4 = c(0.0, -0.5, 0.0, 0.5, 0.0, 0.0, 0.6)
C5 = c(0.0, 0.0, -0.4, 0.0, 0.0, 0.4, 0.6)
C6 = c(0.3, 0.0, 0.0, 0.0, -0.8, 0.0, 0.0)
C7 = c(0.5, 0.0, -0.8, 0.0, 0.0, 0.0, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
Q<-qgraph(w.mat)
C1 = c(0.0, 0.5, 0.5, 0.0, 0.6, 0.0, 0.0)
C2 = c(0.0, 0.0, 0.7, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.0, 0.0, 0.0)
C4 = c(0.0, -0.5, 0.0, 0.0, 0.5, 0.0, 0.6)
C5 = c(0.0, 0.0, -0.4, 0.0, 0.0, 0.4, 0.6)
C6 = c(0.3, 0.0, 0.0, 0.0, -0.8, 0.0, 0.0)
C7 = c(0.5, 0.0, -0.8, 0.0, 0.0, 0.0, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
Q<-qgraph(w.mat)
C1 = c(0.0, 0.5, 0.5, 0.0, 0.6, 0.0, 0.0)
C2 = c(0.0, 0.0, 0.7, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.0, 0.0, 0.7, 0.0, 0.0, 0.0)
C4 = c(0.0, -0.5, 0.0, 0.0, 0.5, 0.0, 0.6)
C5 = c(0.0, 0.0, -0.4, 0.0, 0.0, 0.4, 0.6)
C6 = c(0.3, 0.0, 0.0, 0.0, -0.8, 0.0, 0.0)
C7 = c(0.5, 0.0, -0.8, 0.0, 0.0, 0.0, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
Q<-qgraph(w.mat)
w.mat <- as.data.frame(w.mat)
## Select the arguments for the inference (i.e. iterations 30, rescaled inference rule and sigmoid threshold function)
output <- fcm.infer(act.vec, w.mat, 30, "r", "s")
View(output$values)          # View the concept values for each iteration
## Visualize the concepts' values for each state
library (reshape)
library (ggplot2)
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")              #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
w.mat <- as.data.frame(w.mat)
## Select the arguments for the inference (i.e. iterations 30, rescaled inference rule and sigmoid threshold function)
output <- fcm.infer(act.vec, w.mat, 30, "r", "s", 0.001)
View(output$values)          # View the concept values for each iteration
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")              #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
C1 = c(0.0, 0.5, 0.5, 0.0, 0.6, 0.0, 0.0)
C2 = c(0.5, 0.0, 0.7, 0.0, 0.0.8, 0.0, 0.0)
C3 = c(0.0, 0.0, 0.0, 0.7, 0.0, 0.0, 0.0)
C4 = c(0.0, -0.5, 0.0, 0.0, 0.5, 0.0, 0.6)
C5 = c(0.0, 0.0, -0.4, 0.0, 0.0, 0.4, 0.6)
C6 = c(0.3, 0.0, 0.0, 0.0, -0.8, 0.0, 0.0)
C7 = c(0.5, 0.0, -0.8, 0.0, 0.0, 0.0, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
C1 = c(0.0, 0.5, 0.5, 0.0, 0.6, 0.0, 0.0)
C2 = c(0.5, 0.0, 0.7, 0.0, 0.8, 0.0, 0.0)
C3 = c(0.0, 0.0, 0.0, 0.7, 0.0, 0.0, 0.0)
C4 = c(0.0, -0.5, 0.0, 0.0, 0.5, 0.0, 0.6)
C5 = c(0.0, 0.0, -0.4, 0.0, 0.0, 0.4, 0.6)
C6 = c(0.3, 0.0, 0.0, 0.0, -0.8, 0.0, 0.0)
C7 = c(0.5, 0.0, -0.8, 0.0, 0.0, 0.0, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
w.mat <- as.data.frame(w.mat)
## Select the arguments for the inference (i.e. iterations 30, rescaled inference rule and sigmoid threshold function)
output <- fcm.infer(act.vec, w.mat, 30, "r", "s", 0.001)
View(output$values)          # View the concept values for each iteration
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")              #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)   # Create the weight matrix
w.mat <- as.data.frame(w.mat)
## Select the arguments for the inference (i.e. iterations 30, rescaled inference rule and sigmoid threshold function)
output <- fcm.infer(act.vec, w.mat)
View(output$values)          # View the concept values for each iteration
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")              #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
library(fcm)
library(fcm)
?fcm.infer
library(fcm)
?fcm.infer
library (reshape2)
library(fcm)
?fcm.infer
library(fcm)
?fcm.infer
library(fcm)
?fcm.infer
library(fcm)
library(fcm)
?fcm.infer
library(fcm)
?fcm.infer
library(fcm)
library(fcm)
?fcm.infer
View(w.mat)
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
# Create the weight matrix
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)
# Change the column names of the weight matrix
colnames(w.mat) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")
w.mat <- as.data.frame(w.mat)
write(w.mat, data="w.mat")
write(w.mat, data="weight_matrix")
write(w.mat, file = "weight_matrix")
save(w.mat, file = "weight_matrix.RData", envir = .GlobalEnv)
library(fcm)
data(weight_matrix)
x<-data("weight_matrix")
x
weight_matrix
load(weight_matrix)
load("~/fcm/data/weight_matrix.RData")
weight_matrix
load("~/fcm/data/weight_matrix.RData")
output <- fcm.infer(act.vec, weight_matrix, 30, "r", "s")
class(weight_matrix)
read.csv("C://Users//lucp8904//Documents//UHasselt//My work//My paper/
data("weight_matrix")
library(fcm)
data("weight_matrix")
data(weight_matrix)
read(weight_matrix)
read.RData(weight_matrix)
readRDS(weight_matrix)
readRDS(system.file("weight_matrix"), package = )
readRDS(system.file("weight_matrix"), package = "fcm")
readRDS(path = system.file("weight_matrix"), package = "fcm")
readRDS(path = system.file("weight_matrix.RData"), package = "fcm")
readRDS(path = system.file("weight_matrix.RData", package = "fcm"))
readRDS(path = system.file('weight_matrix.RData', package = "fcm"))
?read.scv
??read.csv
?read.csv
?read
??read
library(fcm)
?fcm.infer
?fcm
??fcm
library(fcm)
?fcm
library(fcm)
?`fcm-package`
?fcm
??fcm
??fcm
??fcm
?fcm
library(fcm)
?fcm
??fcm
library("FuzzyCM", lib.loc="~/R/win-library/3.3")
remove.packages("FuzzyCM", lib="~/R/win-library/3.3")
remove.packages("Kosko", lib="~/R/win-library/3.3")
remove.packages("kkk", lib="~/R/win-library/3.3")
??fcm
?ggplot2
?fcm
library(fcm)
?fcm
library(fcm)
library(fcm)
library(fcm)
library(fcm)
?fcm
??fcm
library(fcm)
??fcm
library(fcm)
?fcm
library(fcm)
?fcm
library(fcm)
library(fcm)
?fcm.infer
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
# Create the weight matrix
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)
colnames(w.mat) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")
w.mat <- as.data.frame(w.mat)
# -------- Select the arguments for the inference  --------
# -------- (i.e. iterations 30, rescaled inference rule and sigmoid threshold function) --------
output <- fcm.infer(act.vec, w.mat, 12, "mk", "s")
View(output$values)          # View the concept values for each iteration
# -------- Visualize the concepts' values for each state --------
library (reshape2)
library (ggplot2)
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")   #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
library(fcm)
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
# Create the weight matrix
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)
colnames(w.mat) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")
w.mat <- as.data.frame(w.mat)
# -------- Select the arguments for the inference  --------
# -------- (i.e. iterations 30, rescaled inference rule and sigmoid threshold function) --------
output1 <- fcm.infer(act.vec, w.mat, 12, "mk", "s")
View(output1$values)          # View the concept values for each iteration
# -------- Visualize the concepts' values for each state --------
library (reshape2)
library (ggplot2)
iterations <- as.numeric(rownames(output1$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output1$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")   #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
# Create the weight matrix
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)
colnames(w.mat) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")
w.mat <- as.data.frame(w.mat)
# -------- Select the arguments for the inference  --------
# -------- (i.e. iterations 30, rescaled inference rule and sigmoid threshold function) --------
output1 <- fcm.infer(act.vec, w.mat, 12, "mkc", "s")
View(output1$values)          # View the concept values for each iteration
# -------- Visualize the concepts' values for each state --------
library (reshape2)
library (ggplot2)
iterations <- as.numeric(rownames(output1$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output1$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")   #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
act.vec <- data.frame(1, 1, 1, 0, 0, 0, 0)    # Create the activation vector
colnames(act.vec) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")  # Change the column names
C1 = c(0.0, 0.0, 0.6, 0.9, 0.0, 0.0, 0.0)
C2 = c(0.1, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C3 = c(0.0, 0.7, 0.0, 0.0, 0.9, 0.0, 0.0)
C4 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.9)
C5 = c(0.0, 0.0, 0.0, 0.0, 0.0, -0.9, -0.9)
C6 = c(-0.3, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)
C7 = c(0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0)
# Create the weight matrix
w.mat <- matrix(c(C1, C2, C3, C4, C5, C6, C7), nrow =7, ncol=7, byrow=TRUE)
colnames(w.mat) <- c("C1", "C2", "C3", "C4", "C5", "C6", "C7")
w.mat <- as.data.frame(w.mat)
# -------- Select the arguments for the inference  --------
# -------- (i.e. iterations 30, rescaled inference rule and sigmoid threshold function) --------
output <- fcm.infer(act.vec, w.mat, 12, "mkc", "s")
View(output$values)          # View the concept values for each iteration
# -------- Visualize the concepts' values for each state --------
library (reshape2)
library (ggplot2)
iterations <- as.numeric(rownames(output$values))  # create a numeric vector named "iterations"
df <- data.frame(iterations, output$values)   # add "iterations" in the "output$values" dataframe
df2 <- melt(df, id="iterations")   #transform df into long formats
ggplot(data=df2,
aes(x=iterations, y=value, group=variable, colour=variable)) +
theme_bw() + geom_line(size=0.7) + geom_point(size = 3)
library(fcm)
?fcm
library(fcm)
?fcm.infer
library(fcm)
library(fcm)
